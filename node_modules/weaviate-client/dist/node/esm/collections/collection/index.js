import { WeaviateInvalidInputError } from '../../errors.js';
import ClassExists from '../../schema/classExists.js';
import aggregate, { metrics } from '../aggregate/index.js';
import { backupCollection } from '../backup/collection.js';
import config from '../config/index.js';
import data from '../data/index.js';
import filter from '../filters/index.js';
import generate from '../generate/index.js';
import { Iterator } from '../iterator/index.js';
import query from '../query/index.js';
import sort from '../sort/index.js';
import tenants from '../tenants/index.js';
const isString = (value) => typeof value === 'string';
const capitalizeCollectionName = (name) => name.charAt(0).toUpperCase() + name.slice(1);
const collection = (connection, name, dbVersionSupport, consistencyLevel, tenant) => {
  if (!isString(name)) {
    throw new WeaviateInvalidInputError(`The collection name must be a string, got: ${typeof name}`);
  }
  const capitalizedName = capitalizeCollectionName(name);
  const queryCollection = query(
    connection,
    capitalizedName,
    dbVersionSupport,
    consistencyLevel,
    tenant === null || tenant === void 0 ? void 0 : tenant.name
  );
  return {
    aggregate: aggregate(
      connection,
      capitalizedName,
      dbVersionSupport,
      consistencyLevel,
      tenant === null || tenant === void 0 ? void 0 : tenant.name
    ),
    backup: backupCollection(connection, capitalizedName),
    config: config(
      connection,
      capitalizedName,
      dbVersionSupport,
      tenant === null || tenant === void 0 ? void 0 : tenant.name
    ),
    data: data(
      connection,
      capitalizedName,
      dbVersionSupport,
      consistencyLevel,
      tenant === null || tenant === void 0 ? void 0 : tenant.name
    ),
    filter: filter(),
    generate: generate(
      connection,
      capitalizedName,
      dbVersionSupport,
      consistencyLevel,
      tenant === null || tenant === void 0 ? void 0 : tenant.name
    ),
    metrics: metrics(),
    name: name,
    query: queryCollection,
    sort: sort(),
    tenants: tenants(connection, capitalizedName, dbVersionSupport),
    exists: () => new ClassExists(connection).withClassName(capitalizedName).do(),
    iterator: (opts) =>
      new Iterator((limit, after) =>
        queryCollection
          .fetchObjects({
            limit,
            after,
            includeVector: opts === null || opts === void 0 ? void 0 : opts.includeVector,
            returnMetadata: opts === null || opts === void 0 ? void 0 : opts.returnMetadata,
            returnProperties: opts === null || opts === void 0 ? void 0 : opts.returnProperties,
            returnReferences: opts === null || opts === void 0 ? void 0 : opts.returnReferences,
          })
          .then((res) => res.objects)
      ),
    withConsistency: (consistencyLevel) =>
      collection(connection, capitalizedName, dbVersionSupport, consistencyLevel, tenant),
    withTenant: (tenant) =>
      collection(
        connection,
        capitalizedName,
        dbVersionSupport,
        consistencyLevel,
        typeof tenant === 'string' ? { name: tenant } : tenant
      ),
  };
};
export default collection;

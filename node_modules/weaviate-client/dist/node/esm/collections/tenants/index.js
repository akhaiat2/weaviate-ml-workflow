var __awaiter =
  (this && this.__awaiter) ||
  function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P
        ? value
        : new P(function (resolve) {
            resolve(value);
          });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator['throw'](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
import { WeaviateUnsupportedFeatureError } from '../../errors.js';
import { TenantActivityStatus } from '../../proto/v1/tenants.js';
import { TenantsCreator, TenantsDeleter, TenantsGetter, TenantsUpdater } from '../../schema/index.js';
class ActivityStatusMapper {
  static from(status) {
    switch (status) {
      case TenantActivityStatus.TENANT_ACTIVITY_STATUS_COLD:
        return 'COLD';
      case TenantActivityStatus.TENANT_ACTIVITY_STATUS_HOT:
        return 'HOT';
      default:
        throw new Error(`Unsupported tenant activity status: ${status}`);
    }
  }
}
const mapReply = (reply) => {
  const tenants = {};
  reply.tenants.forEach((t) => {
    tenants[t.name] = {
      name: t.name,
      activityStatus: ActivityStatusMapper.from(t.activityStatus),
    };
  });
  return tenants;
};
const checkSupportForGRPCTenantsGetEndpoint = (dbVersionSupport) =>
  __awaiter(void 0, void 0, void 0, function* () {
    const check = yield dbVersionSupport.supportsTenantsGetGRPCMethod();
    if (!check.supports) throw new WeaviateUnsupportedFeatureError(check.message);
  });
const parseTenantOrTenantArray = (tenants) => (Array.isArray(tenants) ? tenants : [tenants]);
const parseStringOrTenant = (tenant) => (typeof tenant === 'string' ? tenant : tenant.name);
const tenants = (connection, collection, dbVersionSupport) => {
  const getGRPC = (names) =>
    checkSupportForGRPCTenantsGetEndpoint(dbVersionSupport)
      .then(() => connection.tenants(collection))
      .then((builder) => builder.withGet({ names }))
      .then(mapReply);
  const getREST = () =>
    new TenantsGetter(connection, collection).do().then((tenants) => {
      const result = {};
      tenants.forEach((tenant) => {
        if (!tenant.name) return;
        result[tenant.name] = tenant;
      });
      return result;
    });
  return {
    create: (tenants) => new TenantsCreator(connection, collection, parseTenantOrTenantArray(tenants)).do(),
    get: function () {
      return __awaiter(this, void 0, void 0, function* () {
        const check = yield dbVersionSupport.supportsTenantsGetGRPCMethod();
        return check.supports ? getGRPC() : getREST();
      });
    },
    getByNames: (tenants) => getGRPC(tenants.map(parseStringOrTenant)),
    getByName: (tenant) => {
      const tenantName = parseStringOrTenant(tenant);
      return getGRPC([tenantName]).then((tenants) => tenants[tenantName] || null);
    },
    remove: (tenants) =>
      new TenantsDeleter(
        connection,
        collection,
        parseTenantOrTenantArray(tenants).map((t) => t.name)
      ).do(),
    update: (tenants) => new TenantsUpdater(connection, collection, parseTenantOrTenantArray(tenants)).do(),
  };
};
export default tenants;

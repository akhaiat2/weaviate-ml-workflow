import { Backend, BackupCompressionLevel } from '../../backup/index.js';
import Connection from '../../connection/index.js';
import {
  BackupCreateResponse,
  BackupCreateStatusResponse,
  BackupRestoreResponse,
  BackupRestoreStatusResponse,
} from '../../openapi/types.js';
/** Configuration options available when creating a backup */
export type BackupConfigCreate = {
  /** The size of the chunks to use for the backup. */
  chunkSize?: number;
  /** The standard of compression to use for the backup. */
  compressionLevel?: BackupCompressionLevel;
  /** The percentage of CPU to use for the backup creation job. */
  cpuPercentage?: number;
};
/** Configuration options available when restoring a backup */
export type BackupConfigRestore = {
  /** The percentage of CPU to use for the backuop restoration job. */
  cpuPercentage?: number;
};
/** The arguments required to create and restore backups. */
export type BackupArgs<C extends BackupConfigCreate | BackupConfigRestore> = {
  /** The ID of the backup. */
  backupId: string;
  /** The backend to use for the backup. */
  backend: Backend;
  /** The collections to include in the backup. */
  includeCollections?: string[];
  /** The collections to exclude from the backup. */
  excludeCollections?: string[];
  /** Whether to wait for the backup to complete. */
  waitForCompletion?: boolean;
  /** The configuration options for the backup. */
  config?: C;
};
/** The arguments required to get the status of a backup. */
export type BackupStatusArgs = {
  /** The ID of the backup. */
  backupId: string;
  /** The backend to use for the backup. */
  backend: Backend;
};
export declare const backup: (connection: Connection) => {
  create: (args: BackupArgs<BackupConfigCreate>) => Promise<BackupCreateResponse>;
  getCreateStatus: (args: BackupStatusArgs) => Promise<BackupCreateStatusResponse>;
  getRestoreStatus: (args: BackupStatusArgs) => Promise<BackupRestoreStatusResponse>;
  restore: (args: BackupArgs<BackupConfigRestore>) => Promise<BackupRestoreResponse>;
};
export interface Backup {
  /**
   * Create a backup of the database.
   *
   * @param {BackupArgs} args The arguments for the request.
   * @returns {Promise<BackupCreateResponse>} The response from Weaviate.
   */
  create(args: BackupArgs<BackupConfigCreate>): Promise<BackupCreateResponse>;
  /**
   * Get the status of a backup creation.
   *
   * @param {BackupStatusArgs} args The arguments for the request.
   * @returns {Promise<BackupCreateStatusResponse>} The status of the backup creation.
   */
  getCreateStatus(args: BackupStatusArgs): Promise<BackupCreateStatusResponse>;
  /**
   * Get the status of a backup restore.
   *
   * @param {BackupStatusArgs} args The arguments for the request.
   * @returns {Promise<BackupRestoreStatusResponse>} The status of the backup restore.
   */
  getRestoreStatus(args: BackupStatusArgs): Promise<BackupRestoreStatusResponse>;
  /**
   * Restore a backup of the database.
   *
   * @param {BackupArgs} args The arguments for the request.
   * @returns {Promise<BackupRestoreResponse>} The response from Weaviate.
   */
  restore(args: BackupArgs<BackupConfigRestore>): Promise<BackupRestoreResponse>;
}

var __awaiter =
  (this && this.__awaiter) ||
  function (thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P
        ? value
        : new P(function (resolve) {
            resolve(value);
          });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator['throw'](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
import {
  BackupCreateStatusGetter,
  BackupCreator,
  BackupRestoreStatusGetter,
  BackupRestorer,
} from '../../backup/index.js';
import { WeaviateBackupFailed } from '../../errors.js';
export const backup = (connection) => {
  const getCreateStatus = (args) => {
    return new BackupCreateStatusGetter(connection)
      .withBackupId(args.backupId)
      .withBackend(args.backend)
      .do();
  };
  const getRestoreStatus = (args) => {
    return new BackupRestoreStatusGetter(connection)
      .withBackupId(args.backupId)
      .withBackend(args.backend)
      .do();
  };
  return {
    create: (args) =>
      __awaiter(void 0, void 0, void 0, function* () {
        let builder = new BackupCreator(connection, new BackupCreateStatusGetter(connection))
          .withBackupId(args.backupId)
          .withBackend(args.backend);
        if (args.includeCollections) {
          builder = builder.withIncludeClassNames(...args.includeCollections);
        }
        if (args.excludeCollections) {
          builder = builder.withExcludeClassNames(...args.excludeCollections);
        }
        if (args.config) {
          builder = builder.withConfig({
            ChunkSize: args.config.chunkSize,
            CompressionLevel: args.config.compressionLevel,
            CPUPercentage: args.config.cpuPercentage,
          });
        }
        let res;
        try {
          res = yield builder.do();
        } catch (err) {
          throw new Error(`Backup creation failed: ${err}`);
        }
        if (res.status === 'FAILED') {
          throw new Error(`Backup creation failed: ${res.error}`);
        }
        let status;
        if (args.waitForCompletion) {
          let wait = true;
          while (wait) {
            const res = yield getCreateStatus(args); // eslint-disable-line no-await-in-loop
            if (res.status === 'SUCCESS') {
              wait = false;
              status = res;
            }
            if (res.status === 'FAILED') {
              throw new WeaviateBackupFailed(res.error ? res.error : '<unknown>', 'creation');
            }
            yield new Promise((resolve) => setTimeout(resolve, 1000)); // eslint-disable-line no-await-in-loop
          }
        }
        return status ? Object.assign(Object.assign({}, status), { classes: res.classes }) : res;
      }),
    getCreateStatus: getCreateStatus,
    getRestoreStatus: getRestoreStatus,
    restore: (args) =>
      __awaiter(void 0, void 0, void 0, function* () {
        let builder = new BackupRestorer(connection, new BackupRestoreStatusGetter(connection))
          .withBackupId(args.backupId)
          .withBackend(args.backend);
        if (args.includeCollections) {
          builder = builder.withIncludeClassNames(...args.includeCollections);
        }
        if (args.excludeCollections) {
          builder = builder.withExcludeClassNames(...args.excludeCollections);
        }
        if (args.config) {
          builder = builder.withConfig({
            CPUPercentage: args.config.cpuPercentage,
          });
        }
        let res;
        try {
          res = yield builder.do();
        } catch (err) {
          throw new Error(`Backup restoration failed: ${err}`);
        }
        if (res.status === 'FAILED') {
          throw new Error(`Backup restoration failed: ${res.error}`);
        }
        let status;
        if (args.waitForCompletion) {
          let wait = true;
          while (wait) {
            const res = yield getRestoreStatus(args); // eslint-disable-line no-await-in-loop
            if (res.status === 'SUCCESS') {
              wait = false;
              status = res;
            }
            if (res.status === 'FAILED') {
              throw new WeaviateBackupFailed(res.error ? res.error : '<unknown>', 'restoration');
            }
            yield new Promise((resolve) => setTimeout(resolve, 1000)); // eslint-disable-line no-await-in-loop
          }
        }
        return status ? Object.assign(Object.assign({}, status), { classes: res.classes }) : res;
      }),
  };
};

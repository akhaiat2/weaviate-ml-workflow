"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deadlineMiddleware = void 0;
const nice_grpc_common_1 = require("nice-grpc-common");
/**
 * Client middleware that adds support for setting deadline for a call, after
 * which the call will get cancelled, and a `ClientError` with status code
 * `DEADLINE_EXCEEDED` will be thrown.
 */
const deadlineMiddleware = async function* deadlineMiddleware(call, options) {
    var _a;
    if (options.deadline == null || ((_a = options.signal) === null || _a === void 0 ? void 0 : _a.aborted)) {
        return yield* call.next(call.request, options);
    }
    const { deadline, signal: origSignal, ...restOptions } = options;
    const abortController = new AbortController();
    const abortListener = () => {
        abortController.abort();
    };
    origSignal === null || origSignal === void 0 ? void 0 : origSignal.addEventListener('abort', abortListener);
    let timedOut = false;
    const offset = deadline instanceof Date ? deadline.getTime() - Date.now() : deadline;
    const timer = setTimeout(() => {
        timedOut = true;
        abortController.abort();
    }, offset);
    try {
        return yield* call.next(call.request, {
            ...restOptions,
            signal: abortController.signal,
        });
    }
    finally {
        origSignal === null || origSignal === void 0 ? void 0 : origSignal.removeEventListener('abort', abortListener);
        clearTimeout(timer);
        if (timedOut) {
            throw new nice_grpc_common_1.ClientError(call.method.path, nice_grpc_common_1.Status.DEADLINE_EXCEEDED, 'Deadline exceeded');
        }
    }
};
exports.deadlineMiddleware = deadlineMiddleware;
//# sourceMappingURL=index.js.map